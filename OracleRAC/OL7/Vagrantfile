#│▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
#
# LICENSE UPL 1.0
#
# Copyright (c) 1982-2024 Oracle and/or its affiliates. All rights reserved.
#
#    NAME
#      vagrantfile
#
#    DESCRIPTION
#      Creates two nodes Oracle RAC (Real Application Cluster) Vagrant virtual machines for KVM/libVirt & VirtualBox
#
#    NOTES
#      DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
#    AUTHOR
#      Ruggero Citton - RAC Pack, Cloud Innovation and Solution Engineering Team
#
#    MODIFIED   (MM/DD/YY)
#    rcitton     08/27/21 - ASMFD support added #335 + ASMFD with libvirt 
#    rcitton     09/23/20 - Latest OL7 (7.8.142) box for VirtualBox  is having only one disk
#    rcitton     03/30/20 - VBox libvirt & kvm support
#    rcitton     03/24/20 - Creation
#
#    REVISION
#    20240603 - $Revision: 2.0.2.4 $
#
#│▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒│

### -------------------------------------------------------------------
### Disclaimer:
###
### EXCEPT WHERE EXPRESSLY PROVIDED OTHERWISE, THE INFORMATION, SOFTWARE,
### PROVIDED ON AN \"AS IS\" AND \"AS AVAILABLE\" BASIS. ORACLE EXPRESSLY DISCLAIMS
### ALL WARRANTIES OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT
### LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
### PURPOSE AND NON-INFRINGEMENT. ORACLE MAKES NO WARRANTY THAT: (A) THE RESULTS
### THAT MAY BE OBTAINED FROM THE USE OF THE SOFTWARE WILL BE ACCURATE OR
### RELIABLE; OR (B) THE INFORMATION, OR OTHER MATERIAL OBTAINED WILL MEET YOUR
### EXPECTATIONS. ANY CONTENT, MATERIALS, INFORMATION OR SOFTWARE DOWNLOADED OR
### OTHERWISE OBTAINED IS DONE AT YOUR OWN DISCRETION AND RISK. ORACLE SHALL HAVE
### NO RESPONSIBILITY FOR ANY DAMAGE TO YOUR COMPUTER SYSTEM OR LOSS OF DATA THAT
### RESULTS FROM THE DOWNLOAD OF ANY CONTENT, MATERIALS, INFORMATION OR SOFTWARE.
###
### ORACLE RESERVES THE RIGHT TO MAKE CHANGES OR UPDATES TO THE SOFTWARE AT ANY
### TIME WITHOUT NOTICE.
###
### Limitation of Liability:
###
### IN NO EVENT SHALL ORACLE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
### SPECIAL OR CONSEQUENTIAL DAMAGES, OR DAMAGES FOR LOSS OF PROFITS, REVENUE,
### DATA OR USE, INCURRED BY YOU OR ANY THIRD PARTY, WHETHER IN AN ACTION IN
### CONTRACT OR TORT, ARISING FROM YOUR ACCESS TO, OR USE OF, THE SOFTWARE.
### -------------------------------------------------------------------
### This script is NOT supported by Oracle World Wide Technical Support.
### The script has been tested and appears to work as intended.
### -------------------------------------------------------------------

# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'
require 'ipaddr'

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Vagrant Boxes Source Definition
var_box = 'oraclelinux/7'
var_url = 'https://oracle.github.io/vagrant-projects/boxes/oraclelinux/7.json'

puts ""
puts "│▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒│"
puts "               Oracle RAC (Real Application Cluster)               "
puts "           Vagrant project for KVM/libVirt or VirtualBox           "
puts "        Copyright (c) 2020-2024 Oracle and/or its affiliates       "
puts "-------------------------------------------------------------------"
puts " Author: Ruggero Citton <ruggero.citton@oracle.com>                "
puts "         RAC Pack, Cloud Innovation and Solution Engineering Team  "
puts "│▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒│"
puts ""
puts ""

# -----------------------------------------------------------------
# Variables
# -----------------------------------------------------------------
params = YAML.load_file 'config/vagrant.yml'
#
var_provider_name   = params['env']['provider']
#
var_prefix_name     = params['shared']['prefix_name']
var_domain          = params['shared']['domain']
#
var_domain          = params['shared']['domain']
var_scan_ip1        = params['shared']['scan_ip1']
var_scan_ip2        = params['shared']['scan_ip2']
var_scan_ip3        = params['shared']['scan_ip3']
#
var_vm1_name        = params['node1']['vm_name']
var_vm1_mem_size    = params['node1']['mem_size']
var_vm1_cpus        = params['node1']['cpus']
var_vm1_public_ip   = params['node1']['public_ip']
var_vm1_vip_ip      = params['node1']['vip_ip']
var_vm1_private_ip  = params['node1']['private_ip']
var_vm1_storage     = params['node1']['storage_pool_name']
#
var_vm2_name        = params['node2']['vm_name']
var_vm2_mem_size    = params['node2']['mem_size']
var_vm2_cpus        = params['node2']['cpus']
var_vm2_public_ip   = params['node2']['public_ip']
var_vm2_vip_ip      = params['node2']['vip_ip']
var_vm2_private_ip  = params['node2']['private_ip']
var_vm2_storage     = params['node2']['storage_pool_name']
#
var_asm_storage     = params['shared']['storage_pool_name']
var_asm_disk_num    = params['shared']['asm_disk_num']
var_asm_disk_size   = params['shared']['asm_disk_size']
var_p1_ratio        = params['shared']['p1_ratio']
var_asm_lib_type    = params['shared']['asm_lib_type']
#
var_gi_software     = params['env']['gi_software']
var_gi_software_ver = (var_gi_software.split("_"))[1].to_i
#
var_db_software     = params['env']['db_software']
var_db_software_ver = (var_db_software.split("_"))[1].to_i
#
var_ora_languages   = params['env']['ora_languages']
#
var_root_password   = params['env']['root_password']
var_grid_password   = params['env']['grid_password']
var_oracle_password = params['env']['oracle_password']
var_sys_password    = params['env']['sys_password']
var_pdb_password    = params['env']['pdb_password']
#
var_nomgmtdb        = params['env']['nomgmtdb']
var_orestart        = params['env']['orestart']
#
var_db_name         = params['env']['db_name']
var_pdb_name        = params['env']['pdb_name']
var_db_type         = params['env']['db_type']
var_cdb             = params['env']['cdb']


# -----------------------------------------------------------------
# Provider specific checks
# -----------------------------------------------------------------
if ( (var_provider_name != 'libvirt') and (var_provider_name != 'virtualbox') )
  puts "ERROR: 'provider' option can be 'libvirt' or 'virtualbox'"
  exit
else
  provider = (var_provider_name).to_sym
  puts "--------------------"
  puts "Detected #{provider}"
  puts "--------------------"
end

# Base Settings
if var_provider_name == 'virtualbox'
  ENV['VAGRANT_DEFAULT_PROVIDER'] || 'virtualbox'
  box_disks_num = 1
elsif var_provider_name == 'libvirt'
  box_disks_num = 1
  ENV['VAGRANT_DEFAULT_PROVIDER'] || 'libvirt'
  ENV['VAGRANT_NO_PARALLEL'] = 'yes'
else
  puts "Not supported #{provider}, exiting..."
  exit
end

## Storage Setup
if var_provider_name == 'libvirt'
  var_vm1_storage     = params['node1']['storage_pool_name']
  var_vm2_storage     = params['node2']['storage_pool_name']
  var_asm_storage     = params['shared']['storage_pool_name']

  if var_vm1_storage.to_s.empty?
    var_vm1_storage = "default"
  end
  if var_vm2_storage.to_s.empty?
    var_vm2_storage = "default"
  end
  if var_asm_storage.to_s.empty?
    var_asm_storage = "default"
  end
end
if var_provider_name == 'virtualbox'
  var_group           = "/" + var_prefix_name
  var_vm1_u01_disk    = params['node1']['u01_disk']
  var_vm2_u01_disk    = params['node2']['u01_disk']
  var_non_rotational  = params['shared']['non_rotational']
  var_asm_disk_path   = params['shared']['asm_disk_path']

  if ( (var_non_rotational != 'on') and (var_non_rotational != 'off') )
    puts 'ERROR: non_rotational option can be on or off'
    exit
  end

  if var_asm_disk_path.to_s.empty?
    var_asm_disk_path = "./"
  else
    var_asm_disk_path = var_asm_disk_path + "/"
  end
end



# -----------------------------------------------------------------
# Variables check
# -----------------------------------------------------------------
if !var_prefix_name.match? /\A[0-9a-zA-Z-]{1,14}\z/
  puts 'ERROR: prefix_name \'' + var_prefix_name + '\' option can be any combination'
  puts '  {1..13 chars} of lower and uppercase alphanumeric characters (a - z, A - Z, 0 - 9), and hyphen(-)'
  exit
end

if var_vm1_mem_size.to_i < 6144
  puts 'ERROR: vm1_mem_size option can not be less then 6 Gb'
  exit
end
if var_vm2_mem_size.to_i < 6144
  puts 'ERROR: vm2_mem_size option can not be less then 6 Gb'
  exit
end

if ( (var_nomgmtdb != true) and (var_nomgmtdb != false) )
  puts 'ERROR: nomgmtdb option can be true or false'
  exit
end
if ( (var_orestart != true) and (var_orestart != false) )
  puts 'ERROR: orestart option can be true or false'
  exit
end
if ( (var_cdb != true) and (var_cdb != false) )
  puts 'ERROR: cdb option can be true or false'
  exit
end

if ( (var_orestart == true) and (var_db_type != 'SI'))
  puts 'ERROR: orestart option supports ony Single Instance database'
  exit
end

if ( (var_db_type != 'RAC') and (var_db_type != 'RACONE') and (var_db_type != 'SI'))
  puts 'ERROR: db_type option can be RAC, RACONE or SI'
  exit
end

if var_asm_lib_type.to_s.empty?
 var_asm_lib_type = 'NONE'
end
if ( (var_asm_lib_type != 'ASMLIB') and (var_asm_lib_type != 'ASMFD') and (var_asm_lib_type != 'NONE') )
  puts 'ERROR: asm_lib_type option can be ASMLIB, ASMFD or NONE'
  exit
end

if ! var_p1_ratio.between?(10, 80)
  puts 'ERROR: p1_ratio option can be an integer between 10 and 80'
  exit
end

if var_asm_disk_num.to_i < 4
  puts 'ERROR: asm_disk_num option can not be less then 4'
  exit
end
if var_asm_disk_size.to_i < 10
  puts 'ERROR: asm_disk_size option can not be less then 10 Gb'
  exit
end

class String
  def is_ip?
    !!IPAddr.new(self) rescue false
  end
end

if ! var_vm1_public_ip.is_ip?
  puts 'ERROR: public_ip for node1 is not a valid IP address'
  exit
end
if ! var_vm1_private_ip.is_ip?
  puts 'ERROR: private_ip for node1 is not a valid IP address'
  exit
end
if ! var_vm1_vip_ip.is_ip?
  puts 'ERROR: vip_ip for node1 is not a valid IP address'
  exit
end

if (var_orestart == false)
  if ! var_vm2_public_ip.is_ip?
    puts 'ERROR: public_ip for node2 is not a valid IP address'
    exit
  end
  if ! var_vm2_private_ip.is_ip?
    puts 'ERROR: private_ip for node2 is not a valid IP address'
    exit
  end
  if ! var_vm2_vip_ip.is_ip?
    puts 'ERROR: vip_ip for node1 is not a valid IP address'
    exit
  end
end

if ! var_scan_ip1.is_ip?
  puts 'ERROR: scan_ip1 for node2 is not a valid IP address'
  exit
end
if ! var_scan_ip2.is_ip?
  puts 'ERROR: scan_ip3 for node1 is not a valid IP address'
  exit
end
if ! var_scan_ip3.is_ip?
  puts 'ERROR: scan_ip3 for node2 is not a valid IP address'
  exit
end

if var_db_name.to_s.empty?
 puts "ERROR: db_name is not defined"
 exit
end

if var_root_password.to_s.empty?
 puts "ERROR: root_password is not defined"
 exit
end
if var_grid_password.to_s.empty?
 puts "ERROR: grid_password is not defined"
  exit
end
if var_oracle_password.to_s.empty?
 puts "ERROR: oracle_password is not defined"
 exit
end
if var_sys_password.to_s.empty?
 puts "ERROR: sys_password is not defined"
 exit
end

if (var_cdb == true)
  if var_pdb_name.to_s.empty?
   puts "ERROR: pdb_name is not defined"
   exit
  end
  if var_pdb_password.to_s.empty?
   puts "ERROR: pdb_password is not defined"
   exit
  end
end

path = "./ORCL_software/" + var_gi_software
if ! File.exist?(path)
  puts "ERROR: gi_software does not exist"
  exit
end
path = "./ORCL_software/" + var_db_software
if ! File.exist?(path)
  puts "ERROR: db_software does not exist"
  exit
end

#------------------------------------------------------------------

# Install required Vagrant plugin
unless Vagrant.has_plugin?("vagrant-reload")
  puts 'Installing vagrant-reload Plugin...'
  system('vagrant plugin install vagrant-reload')
end
unless Vagrant.has_plugin?("vagrant-proxyconf")
  puts 'Installing vagrant-proxyconf Plugin...'
  system('vagrant plugin install vagrant-proxyconf')
end

if var_provider_name == 'libvirt'
  unless Vagrant.has_plugin?("vagrant-libvirt")
    puts 'Installing vagrant-libvirt Plugin...'
    system('vagrant plugin install vagrant-libvirt')
  end
  unless Vagrant.has_plugin?("vagrant-kvm")
    puts 'Installing vagrant-kvm Plugin...'
    system('vagrant plugin install vagrant-kvm')
  end
end

# Get host time zone for setting VM time zone
offset_sec = Time.now.gmt_offset
if (offset_sec % (60 * 60)) == 0
  offset_hr = ((offset_sec / 60) / 60)
  timezone_suffix = offset_hr >= 0 ? "-#{offset_hr.to_s}" : "+#{(-offset_hr).to_s}"
  var_system_timezone = 'Etc/GMT' + timezone_suffix
else
  # if host time zone isn't an integer hour offset, fall back to UTC
  var_system_timezone = 'UTC'
end

# VMs definition
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = var_box
  config.vm.box_url = var_url

  #if var_provider_name == 'virtualbox'
  #  config.vm.box_version = ">= 7.8.142"
  #end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
  end

  # add proxy configuration from host env - optional
  if Vagrant.has_plugin?("vagrant-proxyconf")
    puts "getting Proxy Configuration from Host..."
    if ENV["http_proxy"]
      puts "http_proxy: " + ENV["http_proxy"]
      config.proxy.http     = ENV["http_proxy"]
    end
    if ENV["https_proxy"]
      puts "https_proxy: " + ENV["https_proxy"]
      config.proxy.https    = ENV["https_proxy"]
    end
    if ENV["no_proxy"]
      config.proxy.no_proxy = ENV["no_proxy"]
    end
  end

  config.ssh.forward_x11 = true

  if var_provider_name == 'libvirt'
    if var_orestart == false
      # vm node2
      config.vm.define :node2 do |node2|
        node2.vm.hostname = var_vm2_name
        node2.vm.network "private_network", :libvirt__network_name => "vgt-hostonly_network", ip: var_vm2_public_ip
        node2.vm.network "private_network", :libvirt__network_name => "vgt-private_network",  ip: var_vm2_private_ip
        node2.vm.provider :libvirt do |libvirt|
          libvirt.default_prefix = var_prefix_name
          libvirt.driver = "kvm"
          libvirt.memory = var_vm2_mem_size
          libvirt.cpus   = var_vm2_cpus

          libvirt.storage_pool_name = var_vm2_storage
          disk_num = 0
          while disk_num < box_disks_num do
            libvirt.storage :file,
              :size => '100G'      # defaults to 10G if unspecified!
            disk_num += 1
          end

          # Making asm disks
          libvirt.storage_pool_name = var_asm_storage
          disk_num = disk_num.to_i + 1
          num = 0
          asm_disk = 1
          while num < var_asm_disk_num do
            asm_disk_size = var_asm_disk_size.to_s + "G"
              libvirt.storage :file,
                :path => var_prefix_name + '_asm_' + num.to_s,
                :size => asm_disk_size,                             # defaults to 10G if unspecified!
                :cache => 'none',
                :type => 'raw',                                     # defaults to 'qcow2' if unspecified!
                :serial => 'asm_disk_' + asm_disk.to_s,
                :shareable => 'true'
            disk_num += 1
            num += 1
            asm_disk += 1
          end
        end
      end
    end

    # vm node1
    config.vm.define :node1 do |node1|
      node1.vm.hostname = var_vm1_name
      node1.vm.network "private_network", :libvirt__network_name => "vgt-hostonly_network", ip: var_vm1_public_ip
      node1.vm.network "private_network", :libvirt__network_name => "vgt-private_network",  ip: var_vm1_private_ip
      node1.vm.provider :libvirt do |libvirt|
        libvirt.default_prefix = var_prefix_name
        libvirt.driver = "kvm"
        libvirt.memory = var_vm1_mem_size
        libvirt.cpus   = var_vm1_cpus

        libvirt.storage_pool_name = var_vm1_storage
        disk_num = 0
        while disk_num < box_disks_num do
          libvirt.storage :file,
            :size => '100G'      # defaults to 10G if unspecified!
          disk_num += 1
        end

        # Making asm disks
        libvirt.storage_pool_name = var_asm_storage
        disk_num = disk_num.to_i + 1
        num = 0
        asm_disk = 1
        while num < var_asm_disk_num do
          asm_disk_size = var_asm_disk_size.to_s + "G"
            libvirt.storage :file,
              :path => var_prefix_name + '_asm_' + num.to_s,
              :size => asm_disk_size,                           # defaults to 10G if unspecified!
              :cache => 'none',
              :type => 'raw',                                   # defaults to 'qcow2' if unspecified!
              :allow_existing => 'true',
              :serial => 'asm_disk_' + asm_disk.to_s,
              :shareable => 'true'
          disk_num += 1
          num += 1
          asm_disk += 1
        end
      end
    end
  end

  if var_provider_name == 'virtualbox'
    if var_orestart == false
      # vm node2
      config.vm.define :node2 do |node2|
        node2.vm.hostname = var_vm2_name
        node2.vm.network :private_network, ip: var_vm2_public_ip, virtualbox__hostonly: "vboxnet0"
        node2.vm.network :private_network, ip: var_vm2_private_ip, virtualbox__intnet: "private"
        node2.vm.provider :virtualbox do |vb|
          vb.name   = var_prefix_name + "-" + var_vm2_name
          vb.memory = var_vm2_mem_size
          vb.cpus   = var_vm2_cpus
          vb.customize ["modifyvm", :id, "--groups", var_group] unless var_group.nil?

          # Attach default guest vdisks
          disk_num = 0
          while disk_num < box_disks_num do
            vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--nonrotational', var_non_rotational]
            disk_num += 1
          end

          # Make u01 vdisk
          unless File.exist?(var_vm2_u01_disk)
            vb.customize ['createhd', '--filename', var_vm2_u01_disk, '--size', 100 * 1024]
          end
          vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', var_vm2_u01_disk, '--nonrotational', var_non_rotational]

          # Making asm disks
          disk_num = disk_num.to_i + 1
          num = 0
          while num < var_asm_disk_num do
            asm_disk = var_asm_disk_path + "asm_disk" + num.to_s + ".vdi"
            # Making oradata disks
            unless File.exist?(asm_disk)
              vb.customize ['createhd', '--filename', asm_disk, '--size', var_asm_disk_size * 1024, '--format', 'VDI', '--variant', 'Fixed']
            end
            vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', asm_disk, '--mtype', 'shareable', '--nonrotational', var_non_rotational]
            vb.customize ['modifymedium', 'disk', asm_disk, '--type', 'shareable']
            disk_num += 1
            num += 1
          end
        end
      end
    end

    # vm node1
    config.vm.define :node1 do |node1|
      node1.vm.hostname = var_vm1_name
      node1.vm.network :private_network, ip: var_vm1_public_ip, virtualbox__hostonly: "vboxnet0"
      node1.vm.network :private_network, ip: var_vm1_private_ip, virtualbox__intnet: "private"
      node1.vm.provider :virtualbox do |vb|
        vb.name   = var_prefix_name + "-" + var_vm1_name
        vb.memory = var_vm1_mem_size
        vb.cpus   = var_vm1_cpus
        vb.customize ["modifyvm", :id, "--groups", var_group] unless var_group.nil?

        # Attach default guest vdisks
        disk_num = 0
        while disk_num < box_disks_num do
          vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--nonrotational', var_non_rotational]
          disk_num += 1
        end

        # Make u01 vdisk
        unless File.exist?(var_vm1_u01_disk)
          vb.customize ['createhd', '--filename', var_vm1_u01_disk, '--size', 100 * 1024]
        end
        vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', var_vm1_u01_disk, '--nonrotational', var_non_rotational]
        disk_num = disk_num.to_i + 1

        if var_orestart == false
          num = 0
          while num < var_asm_disk_num do
            asm_disk = var_asm_disk_path + "asm_disk" + num.to_s + ".vdi"
            vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', asm_disk, '--mtype', 'shareable', '--nonrotational', var_non_rotational]
            disk_num += 1
            num += 1
          end
        else
          # Making asm disks
          num = 0
          while num < var_asm_disk_num do
            asm_disk = var_asm_disk_path + "asm_disk" + num.to_s + ".vdi"
            # Making oradata disks
            unless File.exist?(asm_disk)
              vb.customize ['createhd', '--filename', asm_disk, '--size', var_asm_disk_size * 1024, '--format', 'VDI', '--variant', 'Fixed']
            end
            vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', asm_disk, '--mtype', 'shareable', '--nonrotational', var_non_rotational]
            vb.customize ['modifymedium', 'disk', asm_disk, '--type', 'shareable']
            disk_num += 1
            num += 1
          end
        end
      end
    end
  end

  # If var_asmlib_type is 'ASMFD', then the running kernel must be UEK4, otherwise ASMFD is not supported due to Grid Infrastructure being version 21.3/19.3
  # It is worth noting that some GI RU later than 21.3/19.3 makes UEK5 supported as well
   if var_asm_lib_type == 'ASMFD'
     config.vm.provision :shell do |shell|
       shell.privileged = true
       shell.inline = <<-SHELL
       echo "Installing UEK4 kernel (via yum) to support 'ASMFD'"
       sed -i '/enabled=0/c\\enabled=1' /etc/yum.repos.d/uek-ol7.repo; yum install -y kernel-uek-4.1.12 kernel-uek-devel-4.1.12
       echo "Rebooting to make UEK4 the running kernel, a prerequisite for ASMFD"
       SHELL
       shell.reboot = true
     end
     if var_provider_name == 'libvirt'
       config.vm.provision :reload
     end
   end

  # Enable ssh password authentication
  config.vm.provision "shell", inline: <<-SHELL
    sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
    /bin/systemctl restart sshd
  SHELL

  # Enable provisioning with a shell script
  config.vm.provision "shell", path: "scripts/setup.sh", env: {
      "PROVIDER"           => var_provider_name,
      "BOX_DISK_NUM"       => box_disks_num,
      "SYSTEM_TIMEZONE"    => var_system_timezone,
      "PREFIX_NAME"        => var_prefix_name,
      "GI_SOFTWARE"        => var_gi_software,
      "GI_SOFTWARE_VER"    => var_gi_software_ver,
      "DB_SOFTWARE"        => var_db_software,
      "DB_SOFTWARE_VER"    => var_db_software_ver,
      "ORA_LANGUAGES"      => var_ora_languages,
      "VM1_NAME"           => var_vm1_name,
      "VM2_NAME"           => var_vm2_name,
      "NODE1_PUBLIC_IP"    => var_vm1_public_ip,
      "NODE2_PUBLIC_IP"    => var_vm2_public_ip,
      "NODE1_VIP_IP"       => var_vm1_vip_ip,
      "NODE2_VIP_IP"       => var_vm2_vip_ip,
      "NODE1_PRIV_IP"      => var_vm1_private_ip,
      "NODE2_PRIV_IP"      => var_vm2_private_ip,
      "SCAN_IP1"           => var_scan_ip1,
      "SCAN_IP2"           => var_scan_ip2,
      "SCAN_IP3"           => var_scan_ip3,
      "DOMAIN"             => var_domain,
      "ROOT_PASSWORD"      => var_root_password,
      "GRID_PASSWORD"      => var_grid_password,
      "ORACLE_PASSWORD"    => var_oracle_password,
      "SYS_PASSWORD"       => var_sys_password,
      "PDB_PASSWORD"       => var_pdb_password,
      "P1_RATIO"           => var_p1_ratio,
      "ASM_LIB_TYPE"       => var_asm_lib_type,
      "NOMGMTDB"           => var_nomgmtdb,
      "ORESTART"           => var_orestart,
      "DB_NAME"            => var_db_name,
      "PDB_NAME"           => var_pdb_name,
      "DB_TYPE"            => var_db_type,
      "CDB"                => var_cdb
  }
end
#----------------------------------------------------------
# EndOfFile
#----------------------------------------------------------
